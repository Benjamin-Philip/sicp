#+title: Exercise 1.1
#+date: 2025-07-22
#+weight: 101
* The Question
Below is a sequence of expressions. What is the result printed by the
interpreter in response to each expression? Assume that the sequence is to be
evaluated in the order in which it is presented.

#+begin_src scheme :eval no
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))

(+ 2 (if (> b a) b a))

(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src
* The Answer
:PROPERTIES:
:header-args:scheme:   :lang sicp :session *Scheme* :results value replace
:END:

We'll break this into chunks of each top-level expression. This will help us examine each expression in enough detail (though mainly to print each expression's result).

** Arithmetic
The first few expressions are simple arithmetic operations, whose results are
printed upon evaluation:

#+begin_src scheme
10
#+end_src

#+RESULTS:
: 10


#+begin_src scheme
(+ 5 3 4)
#+end_src

#+RESULTS:
: 12

#+begin_src scheme
(- 9 1)
#+end_src

#+RESULTS:
: 8


#+begin_src scheme
(/ 6 2)
#+end_src

#+RESULTS:
: 3

#+begin_src scheme
(+ (* 2 4) (- 4 6))
#+end_src

#+RESULTS:
: 6


** Variables

Then the variables =a= and =b= are defined:

#+begin_src scheme :results silent
(define a 3)
(define b (+ a 1))
#+end_src

and their values are used in some simple arithmetic and boolean expressions:

#+begin_src scheme
(+ a b (* a b))
#+end_src

#+RESULTS:
: 19


#+begin_src scheme
(= a b)
#+end_src

#+RESULTS:
: #f


In the =if= expr, =b= is returned since =b= is greater than =a= and =b= is less than the
product of =a= and =b=:

#+begin_src scheme
(if (and (> b a) (< b (* a b)))
    b
    a)
#+end_src

#+RESULTS:
: 4

In the =cond= we get ~(+ 6 7 a)~ since =b= is equal to =4=, which finally evaluates to =16=:

#+begin_src scheme
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
#+end_src

#+RESULTS:
: 16

In the last =if= we get =b= since =b= is greater than =a=, which is added to =2=:

#+begin_src scheme
(+ 2 (if (> b a) b a))
#+end_src

#+RESULTS:
: 6

Finally we get =b= again since =a= is less than =b=, which is substituted into the multiplication:

#+begin_src scheme
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
: 16
